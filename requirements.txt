# Matrix Multiplication Parallel Computing - Requirements
# CS401V - Distributed Systems Assignment 1
# Group: Phan Văn Tài (2202081) & Hà Minh Chiến (2202095)

## System Requirements

### Operating System
- Linux (Ubuntu 20.04+ recommended)
- POSIX-compliant system
- Kernel version 4.0+

### Hardware Requirements
- CPU: Multi-core processor (minimum 4 cores, recommended 8+ cores)
- RAM: Minimum 2GB, recommended 8GB+ for large matrices
- Storage: 100MB free space

### Software Dependencies

#### Compiler
- GCC 7.0+ with C99 support
- Make utility

#### Libraries
- pthread (POSIX threads library)
- Standard C libraries:
  - stdio.h
  - stdlib.h
  - unistd.h
  - sys/mman.h
  - sys/wait.h
  - sys/time.h
  - semaphore.h
  - errno.h
  - time.h

#### Development Tools
- Git (for version control)
- Text editor (VS Code, Vim, etc.)

## Installation Instructions

### 1. Install Dependencies (Ubuntu/Debian)
```bash
sudo apt update
sudo apt install build-essential gcc make
```

### 2. Clone Repository
```bash
git clone <repository-url>
cd assignment1_code
```

### 3. Compile Programs
```bash
# Compile all programs
make all

# Or compile individually
gcc src/sequentialMult.c -o compiled/sequentialMult
gcc src/parallelRowMult.c -o compiled/parallelRowMult -pthread
gcc src/parallelElementMult.c -o compiled/parallelElementMult -pthread
```

### 4. Run Tests
```bash
# Quick test
./scripts/quick_test.sh

# Full benchmark
./scripts/benchmark_report.sh
```

## Program Usage

### Sequential Matrix Multiplication
```bash
./compiled/sequentialMult <matrix_size>
# Example: ./compiled/sequentialMult 1000
```

### Parallel Row Matrix Multiplication
```bash
./compiled/parallelRowMult <matrix_size> <num_processes>
# Example: ./compiled/parallelRowMult 1000 10
```

### Parallel Element Matrix Multiplication
```bash
./compiled/parallelElementMult <matrix_size> <num_processes>
# Example: ./compiled/parallelElementMult 1000 10
```

## Performance Expectations

### Tested Configurations
- Matrix sizes: 10×10, 100×100, 1000×1000, 2000×2000
- Process counts: 10, 100, 1000
- Expected speedup: 3-7x depending on matrix size and process count

### Memory Requirements
- 10×10: ~2KB
- 100×100: ~240KB
- 1000×1000: ~24MB
- 2000×2000: ~96MB

## Troubleshooting

### Common Issues
1. **Compilation errors**: Ensure GCC and pthread are installed
2. **Permission denied**: Check file permissions and execute rights
3. **Out of memory**: Reduce matrix size or process count
4. **Slow performance**: Check CPU core count and system load

### Performance Tips
- Use appropriate process count (10-100 for most cases)
- Ensure sufficient RAM for large matrices
- Close unnecessary applications during benchmarking
- Use SSD storage for better I/O performance

## File Structure
```
assignment1_code/
├── src/                    # Source code files
│   ├── sequentialMult.c
│   ├── parallelRowMult.c
│   ├── parallelElementMult.c
│   └── common.h
├── compiled/               # Compiled executables
│   ├── sequentialMult
│   ├── parallelRowMult
│   └── parallelElementMult
├── scripts/                # Utility scripts
│   ├── quick_test.sh
│   └── benchmark_report.sh
├── reports/                # Performance reports
│   ├── FINAL_REPORT.md
│   ├── PERFORMANCE_REPORT.md
│   └── SUMMARY_RESULTS.md
├── docs/                   # Documentation
│   ├── Assignment 1 - CS401V - Distributed Systems.pdf
│   └── request.txt
├── requirements.txt        # This file
└── README.md              # Project overview
```

## Support
For questions or issues, contact:
- Phan Văn Tài (2202081)
- Hà Minh Chiến (2202095)
